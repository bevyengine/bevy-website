%YAML 1.2
---
# FROM: https://github.com/ron-rs/sublime-ron
# http://www.sublimetext.com/docs/syntax.html
name: RON
file_extensions:
  - ron
version: 2
scope: source.ron
variables: # from RustEnhanced
  non_raw_ident: '[[:alpha:]][_[:alnum:]]*|_[_[:alnum:]]+'
  identifier: '(?:(?:(?:r\#)?{{non_raw_ident}})\b)' # include a word boundary at the end to ensure all possible characters are consumed, to prevent catastrophic backtracking
contexts:
  main:
    - include: extension
    - include: value
  extension:
    - match: '\#\!\['
      scope: punctuation.section.array.begin.ron
      push:
        - meta_scope: meta.structure.array.ron
        - match: '\]'
          scope: punctuation.section.array.end.ron
          pop: true
        - include: extension_inner
        - match: ','
          scope: punctuation.separator.array.ron
        - match: '[^\s\]]'
          scope: invalid.illegal.expected-array-separator.ron
  extension_inner:
    - match: 'enable\('
      push:
        - meta_scope: meta.structure.entity.ron
        - match: '\)'
          scope: punctuation.section.entity.end.ron
          pop: true
        - include: extension_name
        - match: ','
          scope: punctuation.separator.entity.ron
  extension_name:
    - match: 'unwrap_newtypes'
      scope: entity.name.tag.ron
    - match: 'implicit_some'
      scope: entity.name.tag.ron
  array:
    - match: '\['
      scope: punctuation.section.array.begin.ron
      push:
        - meta_scope: meta.structure.array.ron
        - match: '\]'
          scope: punctuation.section.array.end.ron
          pop: true
        - include: value
        - match: ','
          scope: punctuation.separator.array.ron
        - match: '[^\s\]]'
          scope: invalid.illegal.expected-array-separator.ron
  comments:
    - match: /\*\*(?!/)
      scope: punctuation.definition.comment.ron
      push:
        - meta_scope: comment.block.documentation.ron
        - include: block_comment
    - match: /\*
      scope: punctuation.definition.comment.ron
      push:
        - meta_scope: comment.block.ron
        - include: block_comment
    - match: (//).*$\n?
      scope: comment.line.double-slash.ron
      captures:
        1: punctuation.definition.comment.ron
  block_comment:
    - match: \*/
      pop: true
    - match: /\*
      push: block_comment
  constant:
    - match: \b(true|false)\b
      scope: constant.language.ron
  number:
    # handles integer and decimal numbers
    - match: |-
        (?x:         # turn on extended mode
          -?         # an optional minus
          (?:
            0        # a zero
            |        # ...or...
            [1-9]    # a 1-9 character
            \d*      # followed by zero or more digits
          )
          (?:
            (?:
              \.     # a period
              \d+    # followed by one or more digits
            )?
            (?:
              [eE]   # an e character
              [+-]?  # followed by an option +/-
              \d+    # followed by one or more digits
            )?       # make exponent optional
          )?         # make decimal portion optional
        )
      scope: constant.numeric.ron
  object:
    - match: '[A-Za-z_][A-Za-z_0-9]*'
      scope: entity.name.class.ron
    - match: '\('
      scope: punctuation.section.dictionary.begin.ron
      push:
        - meta_scope: meta.structure.entity.ron
        - match: '\)'
          scope: punctuation.section.dictionary.end.ron
          pop: true
        - match: '[a-z_][A-Za-z_0-9]*(?!#")'
          scope: entity.name.tag.ron
        - match: '\:'
          scope: punctuation.separator.dictionary.key-value.ron
        - include: value
        - match: ','
          scope: punctuation.separator.dictionary.ron
  dictionary:
    - match: '\{'
      scope: punctuation.section.dictionary.begin.ron
      push:
        - meta_scope: meta.structure.dictionary.ron
        - match: '\}'
          scope: punctuation.section.dictionary.end.ron
          pop: true
        - include: value
        - match: ':'
          scope: punctuation.separator.dictionary.key-value.ron
        - include: value
        - match: ','
          scope: punctuation.separator.dictionary.ron
  string:
    - match: '"'
      scope: punctuation.definition.string.begin.ron
      push: inside-string
  inside-string:
    - meta_scope: string.quoted.double.ron
    - match: '"'
      scope: punctuation.definition.string.end.ron
      pop: true
    - include: string-escape
    - match: $\n?
      scope: invalid.illegal.unclosed-string.ron
      pop: true
  string-escape:
    - match: |-
        (?x:                # turn on extended mode
          \\                # a literal backslash
          (?:               # ...followed by...
            ["\\/bfnrt]     # one of these characters
            |               # ...or...
            u               # a u
            [0-9a-fA-F]{4}  # and four hex digits
          )
        )
      scope: constant.character.escape.ron
    - match: \\.
      scope: invalid.illegal.unrecognized-string-escape.ron
  format-raw-string: # from RustEnhanced
    - match: (r)(#*)"
      captures:
        1: storage.type.string.ron
        2: punctuation.definition.string.begin.ron
      push:
        - meta_include_prototype: false
        - meta_scope: string.quoted.double.raw.ron
        - match     : '"\2'
          scope     : punctuation.definition.string.end.ron
          pop       : true
        - include   : format-escapes
  format-escapes:
    - match: '\{\{|\}\}'
      scope: constant.character.escape.ron
    - match: |-
        (?x)                      # Spec from http://doc.rust-lang.org/std/fmt/
        \{
          (\d+|{{identifier}})?
          (
            :                     # format_spec delimiter
            (.?[<>^])?            # [[fill]align]
            [+-]?                 # [sign]
            \#?                   # ['#']
            0?                    # [0]
            (\d+\$?)?             # [width]
            (\.(\d+\$?|\*)?)?     # ['.' precision]
            (\?|{{identifier}})?  # [type]
          )?
        \}
      scope: constant.other.placeholder.ron

  value:
    - include: constant
    - include: number
    - include: format-raw-string
    - include: string
    - include: array
    - include: dictionary
    - include: object
    - include: comments
